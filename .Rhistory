library(metafor)
library(scales)
library(tidyverse)
library(brms)
library(modelr)
library(tidybayes)
library(bayesplot)
library(rstan)
library(ggridges)
library(glue)
library(patchwork)
# Read csv as data frame into environment - Note: change source address
Data <- read.csv("C:/Users/James/Dropbox/Research Toolbox/Current R Data Files/Data - self selected loads.csv")
Data$study_label <- as.factor(Data$study_label)
Data$percentage_load_mean <- replmiss(Data$percentage_load_mean, with(Data, (absolute_load_mean / one_rep_max_mean) *100))
Data$prop_load <- Data$percentage_load_mean / 100
Data$prop_load_sd <- Data$percentage_load_sd / 100
# raw mean effect size
Data <- escalc(mi = prop_load, sdi = prop_load_sd, ni = ni, data = Data, measure = "MN")
# arcsine square root transformation
# https://onlinelibrary.wiley.com/doi/full/10.1002/hsr2.178
Data$prop_load_arcsine <- asin(sqrt(Data$prop_load))
Data$prop_load_arcsine_vi <- 1 / (4 * Data$ni + 2)
# logit transformation
Data$prop_load_logit <- log(Data$prop_load / (1 - Data$prop_load))
Data$prop_load_logit_vi <- 1 / (4*Data$ni)
# mean and sample size beta parameterisation variance calculation
# https://en.wikipedia.org/wiki/Beta_distribution#Variance
Data$prop_load_vi <-  Data$prop_load * (1 - Data$prop_load) / (1 + Data$ni)
### Acute studies (including first sessions from chronic studies)
Data_acute <- Data %>%
filter(acute_chronic == "acute")
Data_chronic_first <- Data %>%
filter(acute_chronic == "chronic",
session_number == 1)
Data_acute <- rbind(Data_acute, Data_chronic_first) %>%
mutate(wi = 1/sqrt(prop_load_vi),
size = 0.5 + 3 * (wi - min(wi))/(max(wi) - min(wi)))
# Descriptive Data for Session Number
Data_chronic <- Data %>%
filter(acute_chronic == "chronic") %>%
filter(prop_load <= 1) %>%
mutate(session_number = as.numeric(session_number),
prop_load_vi = prop_load_vi + 3*10^-7,
wi = 1/sqrt(prop_load_vi),
size = 0.5 + 3 * (wi - min(wi))/(max(wi) - min(wi)))
Data_chronic$number_of_reps <- replmiss(Data_chronic$number_of_reps, Data_chronic$repetitions_mean)
Data_chronic <- Data_chronic %>%
mutate(rep_group = if_else(number_of_reps <= 5, "5",
if_else(number_of_reps <= 10, "10",
if_else(number_of_reps <= 15, "15",
if_else(number_of_reps <= 20, "20", "NA")))))
list(unique(Data_chronic_first$study_label))
list(unique(Data_chronic$study_label))
list(unique(Data_acute$study_label))
### Acute studies (including first sessions from chronic studies)
Data_acute <- Data %>%
filter(acute_chronic == "acute")
list(unique(Data_acute$study_label))
bibtex_2academic <- function(bibfile,
outfold,
abstract = FALSE,
overwrite = FALSE) {
require(RefManageR)
require(dplyr)
require(stringr)
require(anytime)
# Import the bibtex file and convert to data.frame
mypubs   <- ReadBib(bibfile, check = "warn", .Encoding = "UTF-8") %>%
as.data.frame()
# assign "categories" to the different types of publications
mypubs   <- mypubs %>%
dplyr::mutate(
pubtype = dplyr::case_when(document_type == "Article" ~ "2",
document_type == "Article in Press" ~ "2",
document_type == "InProceedings" ~ "1",
document_type == "Proceedings" ~ "1",
document_type == "Conference" ~ "1",
document_type == "Conference Paper" ~ "1",
document_type == "MastersThesis" ~ "3",
document_type == "PhdThesis" ~ "3",
document_type == "Manual" ~ "4",
document_type == "TechReport" ~ "4",
document_type == "Book" ~ "5",
document_type == "InCollection" ~ "6",
document_type == "InBook" ~ "6",
document_type == "Misc" ~ "0",
TRUE ~ "0"))
# create a function which populates the md template based on the info
# about a publication
create_md <- function(x) {
# define a date and create filename by appending date and start of title
if (!is.na(x[["year"]])) {
x[["date"]] <- paste0(x[["year"]], "-01-01")
} else {
x[["date"]] <- "2999-01-01"
}
filename <- paste(x[["date"]], x[["title"]] %>%
str_replace_all(fixed(" "), "_") %>%
str_remove_all(fixed(":")) %>%
str_sub(1, 20) %>%
paste0(".md"), sep = "_")
# start writing
if (!file.exists(file.path(outfold, filename)) | overwrite) {
fileConn <- file.path(outfold, filename)
write("+++", fileConn)
# Title and date
write(paste0("title = \"", x[["title"]], "\""), fileConn, append = T)
write(paste0("date = \"", anydate(x[["date"]]), "\""), fileConn, append = T)
# Authors. Comma separated list, e.g. `["Bob Smith", "David Jones"]`.
auth_hugo <- str_replace_all(x["author"], " and ", "\", \"")
auth_hugo <- stringi::stri_trans_general(auth_hugo, "latin-ascii")
write(paste0("authors = [\"", auth_hugo,"\"]"), fileConn, append = T)
# Publication type. Legend:
# 0 = Uncategorized, 1 = Conference paper, 2 = Journal article
# 3 = Manuscript, 4 = Report, 5 = Book,  6 = Book section
write(paste0("publication_types = [\"", x[["pubtype"]],"\"]"),
fileConn, append = T)
# Publication details: journal, volume, issue, page numbers and doi link
publication <- x[["journal"]]
if (!is.na(x[["volume"]])) publication <- paste0(publication,
", (", x[["volume"]], ")")
if (!is.na(x[["number"]])) publication <- paste0(publication,
", ", x[["number"]])
if (!is.na(x[["pages"]])) publication <- paste0(publication,
", _pp. ", x[["pages"]], "_")
if (!is.na(x[["doi"]])) publication <- paste0(publication,
", ", paste0("https://doi.org/",
x[["doi"]]))
write(paste0("publication = \"", publication,"\""), fileConn, append = T)
write(paste0("publication_short = \"", publication,"\""),fileConn, append = T)
# Abstract and optional shortened version.
if (abstract) {
write(paste0("abstract = \"", x[["abstract"]],"\""), fileConn, append = T)
} else {
write("abstract = \"\"", fileConn, append = T)
}
write(paste0("abstract_short = \"","\""), fileConn, append = T)
# other possible fields are kept empty. They can be customized later by
# editing the created md
write("image_preview = \"\"", fileConn, append = T)
write("selected = false", fileConn, append = T)
write("projects = []", fileConn, append = T)
write("tags = []", fileConn, append = T)
#links
write("url_pdf = \"\"", fileConn, append = T)
write("url_preprint = \"\"", fileConn, append = T)
write("url_code = \"\"", fileConn, append = T)
write("url_dataset = \"\"", fileConn, append = T)
write("url_project = \"\"", fileConn, append = T)
write("url_slides = \"\"", fileConn, append = T)
write("url_video = \"\"", fileConn, append = T)
write("url_poster = \"\"", fileConn, append = T)
write("url_source = \"\"", fileConn, append = T)
#other stuff
write("math = true", fileConn, append = T)
write("highlight = true", fileConn, append = T)
# Featured image
write("[header]", fileConn, append = T)
write("image = \"\"", fileConn, append = T)
write("caption = \"\"", fileConn, append = T)
write("+++", fileConn, append = T)
}
}
# apply the "create_md" function over the publications list to generate
# the different "md" files.
apply(mypubs, FUN = function(x) create_md(x), MARGIN = 1)
}
my_bibfile <- "C:/Users/James/Dropbox/Steele Research Ltd/Website/My Library.bib"
out_fold   <- "C:/Users/James/Dropbox/Steele Research Ltd/Website/pubs list"
bibtex_2academic(bibffile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
bib <- ReadBib(C:/Users/James/Dropbox/Steele Research Ltd/Website/My Library.bib, check = "warn", .Encoding = "UTF-8")
bib <- ReadBib("C:/Users/James/Dropbox/Steele Research Ltd/Website/My Library.bib", check = "warn", .Encoding = "UTF-8")
require(RefManageR)
require(dplyr)
require(stringr)
require(anytime)
bib <- ReadBib("C:/Users/James/Dropbox/Steele Research Ltd/Website/My Library.bib", check = "warn", .Encoding = "UTF-8")
my_bibfile <- "C:/Users/James/Dropbox/Steele Research Ltd/Website/publications.bib"
out_fold   <- "C:/Users/James/Dropbox/Steele Research Ltd/Website/pubs list"
bibtex_2academic(bibffile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
my_bibfile <- "C:/Users/James/Dropbox/Steele Research Ltd/Website/publications.bib"
out_fold   <- "C:/Users/James/Dropbox/Steele Research Ltd/Website/pubs list/"
bibtex_2academic(bibffile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
bib <- ReadBib("C:/Users/James/Dropbox/Steele Research Ltd/Website/My Library.bib", check = "warn", .Encoding = "UTF-8")
devtools:::install_github("ROpenSci/bibtex")
bib <- ReadBib("C:/Users/James/Dropbox/Steele Research Ltd/Website/My Library.bib", check = "warn", .Encoding = "UTF-8")
my_bibfile <- "C:/Users/James/Dropbox/Steele Research Ltd/Website/publications.bib"
out_fold   <- "C:/Users/James/Dropbox/Steele Research Ltd/Website/pubs list/"
bibtex_2academic(bibffile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
bib <- ReadBib("C:/Users/James/Dropbox/Steele Research Ltd/Website/publications.bib", check = "warn", .Encoding = "UTF-8")
bibtex_2academic(bibffile  = bib,
outfold   = out_fold,
abstract  = FALSE)
bibtex_2academic(bibfile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
bibtex_2academic <- function(bibfile,
outfold,
abstract = FALSE,
overwrite = FALSE) {
require(RefManageR)
require(dplyr)
require(stringr)
require(anytime)
# Import the bibtex file and convert to data.frame
mypubs   <- ReadBib(bibfile, check = "warn", .Encoding = "UTF-8") %>%
as.data.frame()
# # assign "categories" to the different types of publications
# mypubs   <- mypubs %>%
#   dplyr::mutate(
#     pubtype = dplyr::case_when(document_type == "Article" ~ "2",
#                                document_type == "Article in Press" ~ "2",
#                                document_type == "InProceedings" ~ "1",
#                                document_type == "Proceedings" ~ "1",
#                                document_type == "Conference" ~ "1",
#                                document_type == "Conference Paper" ~ "1",
#                                document_type == "MastersThesis" ~ "3",
#                                document_type == "PhdThesis" ~ "3",
#                                document_type == "Manual" ~ "4",
#                                document_type == "TechReport" ~ "4",
#                                document_type == "Book" ~ "5",
#                                document_type == "InCollection" ~ "6",
#                                document_type == "InBook" ~ "6",
#                                document_type == "Misc" ~ "0",
#                                TRUE ~ "0"))
# create a function which populates the md template based on the info
# about a publication
create_md <- function(x) {
# define a date and create filename by appending date and start of title
if (!is.na(x[["year"]])) {
x[["date"]] <- paste0(x[["year"]], "-01-01")
} else {
x[["date"]] <- "2999-01-01"
}
filename <- paste(x[["date"]], x[["title"]] %>%
str_replace_all(fixed(" "), "_") %>%
str_remove_all(fixed(":")) %>%
str_sub(1, 20) %>%
paste0(".md"), sep = "_")
# start writing
if (!file.exists(file.path(outfold, filename)) | overwrite) {
fileConn <- file.path(outfold, filename)
write("+++", fileConn)
# Title and date
write(paste0("title = \"", x[["title"]], "\""), fileConn, append = T)
write(paste0("date = \"", anydate(x[["date"]]), "\""), fileConn, append = T)
# Authors. Comma separated list, e.g. `["Bob Smith", "David Jones"]`.
auth_hugo <- str_replace_all(x["author"], " and ", "\", \"")
auth_hugo <- stringi::stri_trans_general(auth_hugo, "latin-ascii")
write(paste0("authors = [\"", auth_hugo,"\"]"), fileConn, append = T)
# Publication type. Legend:
# 0 = Uncategorized, 1 = Conference paper, 2 = Journal article
# 3 = Manuscript, 4 = Report, 5 = Book,  6 = Book section
write(paste0("publication_types = [\"", x[["pubtype"]],"\"]"),
fileConn, append = T)
# Publication details: journal, volume, issue, page numbers and doi link
publication <- x[["journal"]]
if (!is.na(x[["volume"]])) publication <- paste0(publication,
", (", x[["volume"]], ")")
if (!is.na(x[["number"]])) publication <- paste0(publication,
", ", x[["number"]])
if (!is.na(x[["pages"]])) publication <- paste0(publication,
", _pp. ", x[["pages"]], "_")
if (!is.na(x[["doi"]])) publication <- paste0(publication,
", ", paste0("https://doi.org/",
x[["doi"]]))
write(paste0("publication = \"", publication,"\""), fileConn, append = T)
write(paste0("publication_short = \"", publication,"\""),fileConn, append = T)
# Abstract and optional shortened version.
if (abstract) {
write(paste0("abstract = \"", x[["abstract"]],"\""), fileConn, append = T)
} else {
write("abstract = \"\"", fileConn, append = T)
}
write(paste0("abstract_short = \"","\""), fileConn, append = T)
# other possible fields are kept empty. They can be customized later by
# editing the created md
write("image_preview = \"\"", fileConn, append = T)
write("selected = false", fileConn, append = T)
write("projects = []", fileConn, append = T)
write("tags = []", fileConn, append = T)
#links
write("url_pdf = \"\"", fileConn, append = T)
write("url_preprint = \"\"", fileConn, append = T)
write("url_code = \"\"", fileConn, append = T)
write("url_dataset = \"\"", fileConn, append = T)
write("url_project = \"\"", fileConn, append = T)
write("url_slides = \"\"", fileConn, append = T)
write("url_video = \"\"", fileConn, append = T)
write("url_poster = \"\"", fileConn, append = T)
write("url_source = \"\"", fileConn, append = T)
#other stuff
write("math = true", fileConn, append = T)
write("highlight = true", fileConn, append = T)
# Featured image
write("[header]", fileConn, append = T)
write("image = \"\"", fileConn, append = T)
write("caption = \"\"", fileConn, append = T)
write("+++", fileConn, append = T)
}
}
# apply the "create_md" function over the publications list to generate
# the different "md" files.
apply(mypubs, FUN = function(x) create_md(x), MARGIN = 1)
}
my_bibfile <- "C:/Users/James/Dropbox/Steele Research Ltd/Website/publications.bib"
out_fold   <- "C:/Users/James/Dropbox/Steele Research Ltd/Website/pubs list/"
bibtex_2academic(bibfile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
